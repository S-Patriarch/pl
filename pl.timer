/*
 * Copyright (C) 2025, S-Patriarch
 * Patriarch library : pl::Timer
 *
 * start() - начало замера
 * stop() - завершение замера
 * duration_milliseconds() - результат замера в миллисекундах
 * duration_seconds() - результат замера в секундах
 * duration_minutes() - результат замера в минутах
 * duration_hours() - результат замера в часах
 */

#ifndef PL_TIMER
#define PL_TIMER 1

#include <chrono>

namespace pl {

    class Timer {
        std::chrono::time_point<std::chrono::high_resolution_clock> m_startTime;
        std::chrono::time_point<std::chrono::high_resolution_clock> m_endTime;

    public:
        Timer() : m_startTime{std::chrono::high_resolution_clock::now()} {}

        auto start() -> void;
        auto stop() -> void;

        auto duration_milliseconds() -> float const;
        auto duration_seconds() -> float const;
        auto duration_minutes() -> float const;
        auto duration_hours() -> float const;
    };

    auto Timer::start() -> void
    {m_startTime = std::chrono::high_resolution_clock::now();}

    auto Timer::stop() -> void
    {m_endTime = std::chrono::high_resolution_clock::now();}

    auto Timer::duration_milliseconds() -> float const
    {
        std::chrono::duration<float,std::milli> duration
            = m_endTime - m_startTime;
        return duration.count();
    }

    auto Timer::duration_seconds() -> float const
    {
        std::chrono::duration<float> duration
            = m_endTime - m_startTime;
        return duration.count();
    }

    auto Timer::duration_minutes() -> float const
    {
        std::chrono::duration<float,std::ratio<60>> duration
            = m_endTime - m_startTime;
        return duration.count();
    }

    auto Timer::duration_hours() -> float const
    {
        std::chrono::duration<float,std::ratio<3600>> duration
            = m_endTime - m_startTime;
        return duration.count();
    }

}

#endif
