/*
 * Copyright (C) 2025, S-Patriarch
 * Patriarch library : pl::Logger
 *
 * write() - запись строки в журнал логов
 * read() - чтение строки из журнала логов
 */

#ifndef PL_LOGGER
#define PL_LOGGER 1

#ifndef PL_EXCEPTION
#include "pl.exception"
#endif

#include <fstream>
#include <iostream>
#include <string>
#include <mutex>
#include <shared_mutex>

namespace pl {

    using std::string;

    class Logger {
        std::fstream      file_;  // файловый поток
        std::shared_mutex mutex_; // мьютекс

    public:
        Logger(const string &);
        ~Logger() noexcept;

        auto write(const string &) -> void;
        auto read() -> string;
    };

    Logger::Logger(const string &s_flog)
    {
        // открытие файла для чтения, вывода,
        // добавления с отключенной буферизацией
        file_.open(s_flog, std::ios::in|std::ios::out|std::ios::app);
        if (!file_.is_open())
            throw Exception("E: failed to open log file.");
    }

    Logger::~Logger() noexcept
    {if (file_.is_open()) file_.close();}

    auto Logger::write(const string &s) -> void
        // запись строки в журнал логов
        // создание объекта lck типа std::unique_lock, который блокирует
        // мьютекс m_mutex в режиме монопольной (или уникальной) блокировки
        // это значит, что только один поток может иметь доступ к общему
        // ресурсу, защищенному m_mutex, в данный момент времени
        // объект lck будет автоматически освобожден при выходе из
        // области видимости
    {
        std::unique_lock<std::shared_mutex> lck(mutex_);
        if (file_.is_open()) {
            file_
                << s
                << "\n"
                << std::flush;
        }
    }

    auto Logger::read() -> string
        // чтение строки из журнала логов
        // создание объекта lck типа std::shared_lock, который блокирует
        // мьютекс m_mutex в режиме совместной блокировки
        // это позволяет нескольким потокам иметь одновременный доступ к
        // общему ресурсу
        // объект lck будет автоматически освобожден при выходе из
        // области видимости
    {
        string s_res {};
        std::shared_lock<std::shared_mutex> lck(mutex_);
        if (file_.is_open()) std::getline(file_, s_res);
        return s_res;
    }

}

#endif
