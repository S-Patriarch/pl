/*
 * Copyright (C) 2024, S-Patriarch
 * Patriarch library : pl::string
 */

#ifndef PL_STRING
#define PL_STRING 1

#include <string>
#include <vector>
#include <sstream>
#include <cctype>
#include <algorithm>

namespace pl {
  class String {
  /*
   * класс для работы со строками
   *
   * компонентные функции:
   * extract_digits_from_string() - последовательное извлечение цифр из строки
   * strspl()                     - разделение строки на слова
   * strrev()                     - переворот строки
   */
  public:
    auto extract_digits_from_string(const std::string &s)
      -> std::vector<unsigned short int>
      // функция последовательно извлекает цифры из строки
    {
      std::vector<unsigned short int> res{};
      for (char c : s) {
        if (std::isdigit(static_cast<unsigned char>(c))) {
          // преобразуем символ цифры в числовое значение
          res.emplace_back(c-'0');
        }
      }
      res.shrink_to_fit();
      return res;
    }

    auto strspl(const std::string &s)
      -> std::vector<std::string>
      // функция разделяет строку на слова
    {
      std::stringstream ss(s);
      std::vector<std::string> res;
      std::string w{};
      while (ss >> w) { res.emplace_back(w); }
      return res;
    }

    auto strrev(std::string &s)
      -> void
      // функция переворачивает строку
      // при этом строка s меняется прямо внутри
      // функции без возврата нового значения
    {
      std::reverse(s.begin(),s.end());
    }
  };
}

#endif
