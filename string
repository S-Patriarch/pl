/*
 * Copyright (C) 2024, S-Patriarch
 * Patriarch library : pl::string
 */

#ifndef PL_STRING
#define PL_STRING 1

#include <string>
#include <vector>
#include <sstream>
#include <cctype>
#include <algorithm>

namespace pl {
  /*
   * Класс для работы со строками.
   *
   * компонентные функции:
   * strspl()         - разделение строки на слова
   * strrev()         - переворот строки
   * extract_digits() - последовательное извлечение цифр из строки
   * char_count()     - подсчет количества вхождений символа в строку
   */
  class String {
  public:
    auto strspl(const std::string &)
      -> std::vector<std::string>;

    auto strrev(std::string &)
      -> void;

    auto extract_digits(const std::string &)
      -> std::vector<unsigned short int>;

    auto char_count(const std::string &, char)
      -> int;
  };

  /*
   * Реализация компонентных функций.
   * class String
   */

  auto String::strspl(const std::string &s)
    -> std::vector<std::string>
    // функция разделяет строку на слова
  {
    std::stringstream ss(s);
    std::vector<std::string> res;
    std::string w {};
    while (ss >> w) {res.emplace_back(w);}
    return res;
  }

  auto String::strrev(std::string &s)
    -> void
    // функция переворачивает строку
    // при этом строка s меняется прямо внутри
    // функции без возврата нового значения
  {
    std::reverse(s.begin(),s.end());
  }

  auto String::extract_digits(const std::string &s)
    -> std::vector<unsigned short int>
    // функция последовательно извлекает цифры из строки
  {
    std::vector<unsigned short int> res {};
    for (char c : s) {
      if (std::isdigit(static_cast<unsigned char>(c))) {
        // преобразуем символ цифры в числовое значение
        res.emplace_back(c-'0');
      }
    }
    res.shrink_to_fit();
    return res;
  }

  auto String::char_count(const std::string &s, char c)
    -> int
    // функция подсчитывает количество вхождений
    // символа в строку
  {
    int count {0};
    for (char ch : s) {
      if (ch==c) {++count;}
    }
    return count;
  }
}

#endif
