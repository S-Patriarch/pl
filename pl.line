/*
 * Copyright (C) 2025, S-Patriarch
 * Patriarch library : pl::Line
 *
 * set_line_color() - установка атрибутов цвета линии
 * set_line_color_256_background() - установка атрибутов цвета фона
 * set_line_yx() - установка начальных координат линии
 * set_line_length() - установка длины линии
 * set_line_view() - установка вида линии
 * set_line_direction() - установка направления линии
 * ldraw() - отрисовка линии
 */

#ifndef PL_LINE
#define PL_LINE 1

#include <iostream>
#include <cstddef>
#include <string>

#ifndef PL_CONIO
#include "pl.conio"
#endif

namespace pl {

    using std::cout;
    using std::endl;
    using std::string;

    using CA = pl::Conio::Attributes;

    class Line : public Conio {
    public:
        enum LineDrawings {
            LINE_SINGLE_LIGHT,   // одинарная тонкая линия
            LINE_SINGLE_HEAVY,   // одинарная толстая линия
            LINE_DOUBLE_LIGHT    // двойная тонкая диния
        };

        enum LineDirection {
            LINE_HORIZONTAL,     // отрисовка горизонтальной линии
            LINE_VERTICAL        // отрисовка вертикальной линии
        };

        Line(int, int, int, LineDrawings, LineDirection);
        virtual ~Line() noexcept =default;

        auto set_line_color(CA, CA) -> void;
        auto set_line_color_256_background(int) -> void;
        auto set_line_yx(int, int) -> void;
        auto set_line_length(int) -> void;
        auto set_line_view(LineDrawings) -> void;
        auto set_line_direction(LineDirection) -> void;
        auto ldraw() -> void const;

    private:
        int starty_;                    // координата y начала линии
        int startx_;                    // координата x начала линии
        int length_;                    // длина линии

        string bcolor256_ {};

        LineDrawings  line_;            // вид линии
        LineDirection direction_;       // направление линии

        CA fcolorline_ {CA::F_DEFAULT}; // цвет линии
        CA bcolorline_ {CA::B_DEFAULT}; // цвет фона линии
    };

    /*
     * Реализация методов класса pl::Line
     */

    Line::Line(int y =0, int x =0, int length =1,
        LineDrawings line =LineDrawings::LINE_SINGLE_LIGHT,
        LineDirection direction =LineDirection::LINE_HORIZONTAL)
        : starty_{y}, startx_{x}, length_{length},
        line_{line}, direction_{direction}
    {}

    auto Line::set_line_color(CA fcolor, CA bcolor) -> void
    {
        fcolorline_ = fcolor;
        bcolorline_ = bcolor;
    }

    auto Line::set_line_color_256_background(int bcolor) -> void
    {bcolor256_ = "\033[48;5;"+std::to_string(bcolor)+"m";}

    auto Line::set_line_yx(int y, int x) -> void
    {
        starty_ = y;
        startx_ = x;
    }

    auto Line::set_line_length(int length) -> void
    {length_ = length;}

    auto Line::set_line_view(LineDrawings line) -> void
    {line_ = line;}

    auto Line::set_line_direction(LineDirection direction) -> void
    {direction_ = direction;}

    auto Line::ldraw() -> void const
    {
        res_attr();
        set_color(fcolorline_);
        if (bcolor256_!="") {set_attr(bcolor256_);}
        else {set_color(bcolorline_);}

        if (direction_==LineDirection::LINE_HORIZONTAL) {
            for (size_t i =0; i!=length_; ++i) {
                cursor_move(starty_, startx_+i);
                if (line_==LineDrawings::LINE_SINGLE_LIGHT)
                    cout << "\u2500";
                if (line_==LineDrawings::LINE_SINGLE_HEAVY)
                    cout << "\u2501";
                if (line_==LineDrawings::LINE_DOUBLE_LIGHT)
                    cout << "\u2550";
            }
        }
        if (direction_==LineDirection::LINE_VERTICAL) {
            for (size_t i =0; i!=length_; ++i) {
                cursor_move(starty_+i, startx_);
                if (line_==LineDrawings::LINE_SINGLE_LIGHT)
                    cout << "\u2502";
                if (line_==LineDrawings::LINE_SINGLE_HEAVY)
                    cout << "\u2503";
                if (line_==LineDrawings::LINE_DOUBLE_LIGHT)
                    cout << "\u2551";
            }
        }

        cout << std::flush;
    }

}

#endif
